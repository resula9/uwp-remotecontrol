//-----------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
//
//   For more information, see: http://go.microsoft.com/fwlink/?LinkID=623246
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

using namespace concurrency;

namespace com { namespace ooeygui { namespace remotecontrolvehicle {

ref class remotecontrolvehicleConsumer;

public ref class remotecontrolvehicleGetAnalogChannelDataResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property remotecontrolvehicleAnalogChannelData^ AnalogChannelData
    {
        remotecontrolvehicleAnalogChannelData^ get() { return m_interfaceMemberAnalogChannelData; }
    internal:
        void set(_In_ remotecontrolvehicleAnalogChannelData^ value) { m_interfaceMemberAnalogChannelData = value; }
    }
    
    static remotecontrolvehicleGetAnalogChannelDataResult^ CreateSuccessResult(_In_ remotecontrolvehicleAnalogChannelData^ interfaceMemberAnalogChannelData)
    {
        auto result = ref new remotecontrolvehicleGetAnalogChannelDataResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->AnalogChannelData = interfaceMemberAnalogChannelData;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }
    
    static remotecontrolvehicleGetAnalogChannelDataResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new remotecontrolvehicleGetAnalogChannelDataResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
    remotecontrolvehicleAnalogChannelData^ m_interfaceMemberAnalogChannelData;
};

public ref class remotecontrolvehicleSetAnalogChannelStateResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    
    static remotecontrolvehicleSetAnalogChannelStateResult^ CreateSuccessResult()
    {
        auto result = ref new remotecontrolvehicleSetAnalogChannelStateResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }
    
    static remotecontrolvehicleSetAnalogChannelStateResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new remotecontrolvehicleSetAnalogChannelStateResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
};

public ref class remotecontrolvehicleSetToggleChannelStateResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    
    static remotecontrolvehicleSetToggleChannelStateResult^ CreateSuccessResult()
    {
        auto result = ref new remotecontrolvehicleSetToggleChannelStateResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }
    
    static remotecontrolvehicleSetToggleChannelStateResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new remotecontrolvehicleSetToggleChannelStateResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
};

public ref class remotecontrolvehicleSetMultipleAnalogChannelStatesResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    
    static remotecontrolvehicleSetMultipleAnalogChannelStatesResult^ CreateSuccessResult()
    {
        auto result = ref new remotecontrolvehicleSetMultipleAnalogChannelStatesResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }
    
    static remotecontrolvehicleSetMultipleAnalogChannelStatesResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new remotecontrolvehicleSetMultipleAnalogChannelStatesResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
};

public ref class remotecontrolvehicleJoinSessionResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property remotecontrolvehicleConsumer^ Consumer
    {
        remotecontrolvehicleConsumer^ get() { return m_consumer; }
    internal:
        void set(_In_ remotecontrolvehicleConsumer^ value) { m_consumer = value; }
    };

private:
    int32 m_status;
    remotecontrolvehicleConsumer^ m_consumer;
};

public ref class remotecontrolvehicleGetReceiverNameResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property Platform::String^ ReceiverName
    {
        Platform::String^ get() { return m_value; }
    internal:
        void set(_In_ Platform::String^ value) { m_value = value; }
    }

    static remotecontrolvehicleGetReceiverNameResult^ CreateSuccessResult(_In_ Platform::String^ value)
    {
        auto result = ref new remotecontrolvehicleGetReceiverNameResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->ReceiverName = value;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }

    static remotecontrolvehicleGetReceiverNameResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new remotecontrolvehicleGetReceiverNameResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
    Platform::String^ m_value;
};

public ref class remotecontrolvehicleGetManufacturerResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property Platform::String^ Manufacturer
    {
        Platform::String^ get() { return m_value; }
    internal:
        void set(_In_ Platform::String^ value) { m_value = value; }
    }

    static remotecontrolvehicleGetManufacturerResult^ CreateSuccessResult(_In_ Platform::String^ value)
    {
        auto result = ref new remotecontrolvehicleGetManufacturerResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->Manufacturer = value;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }

    static remotecontrolvehicleGetManufacturerResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new remotecontrolvehicleGetManufacturerResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
    Platform::String^ m_value;
};

public ref class remotecontrolvehicleGetDeviceTypeResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property uint32 DeviceType
    {
        uint32 get() { return m_value; }
    internal:
        void set(_In_ uint32 value) { m_value = value; }
    }

    static remotecontrolvehicleGetDeviceTypeResult^ CreateSuccessResult(_In_ uint32 value)
    {
        auto result = ref new remotecontrolvehicleGetDeviceTypeResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->DeviceType = value;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }

    static remotecontrolvehicleGetDeviceTypeResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new remotecontrolvehicleGetDeviceTypeResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
    uint32 m_value;
};

public ref class remotecontrolvehicleGetChannelsResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property Windows::Foundation::Collections::IVector<remotecontrolvehicleChannelsItem^>^ Channels
    {
        Windows::Foundation::Collections::IVector<remotecontrolvehicleChannelsItem^>^ get() { return m_value; }
    internal:
        void set(_In_ Windows::Foundation::Collections::IVector<remotecontrolvehicleChannelsItem^>^ value) { m_value = value; }
    }

    static remotecontrolvehicleGetChannelsResult^ CreateSuccessResult(_In_ Windows::Foundation::Collections::IVector<remotecontrolvehicleChannelsItem^>^ value)
    {
        auto result = ref new remotecontrolvehicleGetChannelsResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->Channels = value;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }

    static remotecontrolvehicleGetChannelsResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new remotecontrolvehicleGetChannelsResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
    Windows::Foundation::Collections::IVector<remotecontrolvehicleChannelsItem^>^ m_value;
};

} } } 
