//-----------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
//
//   For more information, see: http://go.microsoft.com/fwlink/?LinkID=623246
// </auto-generated>
//-----------------------------------------------------------------------------
#include "pch.h"

using namespace Microsoft::WRL;
using namespace Platform;
using namespace Windows::Foundation;
using namespace Windows::Foundation::Collections;
using namespace Windows::Devices::AllJoyn;
using namespace com::ooeygui::remotecontrolvehicle;

// Note: Unlike an Interface implementation, which provides a single handler for each member, the event
// model allows for 0 or more listeners to be registered. The EventAdapter implementation deals with this
// difference by implementing a last-writer-wins policy. The lack of any return value (i.e., 0 listeners)
// is handled by returning a null result.

// Methods
IAsyncOperation<remotecontrolvehicleGetAnalogChannelDataResult^>^ remotecontrolvehicleServiceEventAdapter::GetAnalogChannelDataAsync(_In_ AllJoynMessageInfo^ info, _In_ uint32 interfaceMemberChannelId)
{
    auto args = ref new remotecontrolvehicleGetAnalogChannelDataCalledEventArgs(info, interfaceMemberChannelId);
    GetAnalogChannelDataCalled(this, args);
    return remotecontrolvehicleGetAnalogChannelDataCalledEventArgs::GetResultAsync(args);
}

IAsyncOperation<remotecontrolvehicleSetAnalogChannelStateResult^>^ remotecontrolvehicleServiceEventAdapter::SetAnalogChannelStateAsync(_In_ AllJoynMessageInfo^ info, _In_ uint32 interfaceMemberChannelId, _In_ double interfaceMemberValue)
{
    auto args = ref new remotecontrolvehicleSetAnalogChannelStateCalledEventArgs(info, interfaceMemberChannelId, interfaceMemberValue);
    SetAnalogChannelStateCalled(this, args);
    return remotecontrolvehicleSetAnalogChannelStateCalledEventArgs::GetResultAsync(args);
}

IAsyncOperation<remotecontrolvehicleSetToggleChannelStateResult^>^ remotecontrolvehicleServiceEventAdapter::SetToggleChannelStateAsync(_In_ AllJoynMessageInfo^ info, _In_ uint32 interfaceMemberChannelId, _In_ uint32 interfaceMemberValue)
{
    auto args = ref new remotecontrolvehicleSetToggleChannelStateCalledEventArgs(info, interfaceMemberChannelId, interfaceMemberValue);
    SetToggleChannelStateCalled(this, args);
    return remotecontrolvehicleSetToggleChannelStateCalledEventArgs::GetResultAsync(args);
}

IAsyncOperation<remotecontrolvehicleSetMultipleAnalogChannelStatesResult^>^ remotecontrolvehicleServiceEventAdapter::SetMultipleAnalogChannelStatesAsync(_In_ AllJoynMessageInfo^ info, _In_ Windows::Foundation::Collections::IVectorView<uint32>^ interfaceMemberChannelIds, _In_ Windows::Foundation::Collections::IVectorView<double>^ interfaceMemberValues)
{
    auto args = ref new remotecontrolvehicleSetMultipleAnalogChannelStatesCalledEventArgs(info, interfaceMemberChannelIds, interfaceMemberValues);
    SetMultipleAnalogChannelStatesCalled(this, args);
    return remotecontrolvehicleSetMultipleAnalogChannelStatesCalledEventArgs::GetResultAsync(args);
}

// Property Reads
IAsyncOperation<remotecontrolvehicleGetReceiverNameResult^>^ remotecontrolvehicleServiceEventAdapter::GetReceiverNameAsync(_In_ AllJoynMessageInfo^ info)
{
    auto args = ref new remotecontrolvehicleGetReceiverNameRequestedEventArgs(info);
    GetReceiverNameRequested(this, args);
    return remotecontrolvehicleGetReceiverNameRequestedEventArgs::GetResultAsync(args);
}

IAsyncOperation<remotecontrolvehicleGetManufacturerResult^>^ remotecontrolvehicleServiceEventAdapter::GetManufacturerAsync(_In_ AllJoynMessageInfo^ info)
{
    auto args = ref new remotecontrolvehicleGetManufacturerRequestedEventArgs(info);
    GetManufacturerRequested(this, args);
    return remotecontrolvehicleGetManufacturerRequestedEventArgs::GetResultAsync(args);
}

IAsyncOperation<remotecontrolvehicleGetDeviceTypeResult^>^ remotecontrolvehicleServiceEventAdapter::GetDeviceTypeAsync(_In_ AllJoynMessageInfo^ info)
{
    auto args = ref new remotecontrolvehicleGetDeviceTypeRequestedEventArgs(info);
    GetDeviceTypeRequested(this, args);
    return remotecontrolvehicleGetDeviceTypeRequestedEventArgs::GetResultAsync(args);
}

IAsyncOperation<remotecontrolvehicleGetChannelsResult^>^ remotecontrolvehicleServiceEventAdapter::GetChannelsAsync(_In_ AllJoynMessageInfo^ info)
{
    auto args = ref new remotecontrolvehicleGetChannelsRequestedEventArgs(info);
    GetChannelsRequested(this, args);
    return remotecontrolvehicleGetChannelsRequestedEventArgs::GetResultAsync(args);
}

// Property Writes
